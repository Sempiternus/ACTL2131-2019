data <- read.csv(file="5163984.csv", header=TRUE, sep=",")
names(data) <- c("x", "y")
#For MLE and modelling
library(fitdistrplus)
#For graphing
library(ggplot2)
#For access to Pareto
library(actuar)
#For merging
library(reshape2)
#For ddply function
library(plyr)
#For mvnorm.skew.test
library("ICS")
#For F.O.G
library("goftest")
============================================================================================================================
#Distribution 1
mvnorm.skew.test(data)
fit.normx <- fitdist(data$x, distr = "norm", method = "mle" )
fit.normx
plot(fit.normx)
------------------------------------------------------------------------
#For a more effective QQ-Plot we can do the following
#Extract and sort our observed data
x <- data$x
x <- sort(x)
#Produce a theoretical normal distribution utilising our calculated MLE parameters
norm.x <- rnorm(10000, mean=99.8013, sd=251.2673)
#Sort it
norm.x2 <- sort(norm.x)
#Produce a new dataframe using this information
PDnx <- data.frame(Sample = x, Theoretical = norm.x2)
#Graph data using ggplot2
ggplot(data = PDnx, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values against normal Distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
------------------------------------------------------------------------
#Producing a more effective ecdf
PD1 <- melt(PDnx)
names(PD1) <- c("Distribution", "Claim")
PD1 <- ddply(PD1, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD1, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Normal CDF') +
xlab('Claim Size') +
ylab('F(x)') +
xlim(NA, 4000)
***********************************************************************
Repeat for Y
fit.normy <- fitdist(data$y, distr = "norm", method = "mle" )
fit.normy
plot(fit.normy)
-----------------------------------------------------------------------
#QQ Plot
y = data$y
y = sort(data$y)
norm.y <- rnorm(10000, mean=206.3851, sd=908.4844)
norm.y2 <- sort(norm.y)
#Produce a new dataframe using this information
PDny <- data.frame(Sample = y, Theoretical = norm.y2)
#Graph data using ggplot2
ggplot(data = PDny, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values against normal Distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
-----------------------------------------------------------------------
#Producing a more effective ecdf
PD2 <- melt(PDny)
names(PD2) <- c("Distribution", "Claim")
PD1 <- ddply(PD2, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD2, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Normal CDF') +
xlab('Claim Size') +
ylab('F(x)') +
xlim(NA, 15000)
----------------------------------------------------------------------------------------------------------------------------------------------
#G.O.F tests
#We can use both Anderson-Darling and Kolmogorov Smirnoff
ks.test(x, norm.x)
ks.test(y, norm.y)
ad.test(data$x, "pnorm", mean=99.8013, sd=251.2673)
ad.test(data$y, "pnorm", mean=206.3851, sd=908.4844)
cvm.test(data$x, "pnorm", mean=99.8013, sd=251.2673)
cvm.test(data$y, "pnorm", mean=206.3851, sd=908.4844)
#Note that we are interpreting D and AN statistics rather than P value. The smaller these values, the better.

============================================================================================================================
#Distribution 2

fit.gamma <- fitdist(data$x, distr = "gamma", method = "mle")
fit.gamma
plot(fit.gamma)
------------------------------------------------------------------------
#For a more effective QQ-Plot we can do the following
#Produce a theoretical gamma distribution utilising our calculated MLE parameters
gamma.x <- rgamma(10000, shape=0.651343421, rate=0.006526678)
#Sort it
gamma.x2 <- sort(gamma.x)
#Produce a new dataframe using this information
PDg <- data.frame(Sample = x, Theoretical = gamma.x2)
#Graph data using ggplot2
ggplot(data = PDg, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values against Gamma Distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
------------------------------------------------------------------------
#Producing a more effective ecdf
PD3 <- melt(PDg)
names(PD3) <- c("Distribution", "Claim")
PD3 <- ddply(PD3, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD3, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Gamma CDF') +
xlab('Claim Size') +
ylab('F(x)') +
xlim(NA, 6000)
***********************************************************************
#Repeat process for Pareto; try to fit against y
fit.pareto <- fitdist(data$y, distr = "pareto", method = "mle")
fit.pareto
plot(fit.pareto)
#Producing a better graph
pareto.y=rpareto(10000, shape=2.033259, scale=202.661918)
pareto.y2=sort(pareto.y)
PDp <- data.frame(Sample = y, Theoretical = pareto.y2)
ggplot(data = PDp, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values against Pareto distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
------------------------------------------------------------------------
#Producing a more effective ecdf
PD4 <- melt(PDp)
names(PD4) <- c("Distribution", "Claim")
PD4 <- ddply(PD4, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD4, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Pareto CDF') +
xlab('Claim Size') +
ylab('F(x)') +
xlim(NA, 20000)
------------------------------------------------------------------------
#G.O.F tests
#We can use both Anderson-Darling and Kolmogorov Smirnoff
ks.test(x, gamma.x)
ks.test(y, pareto.y)
ad.test(data$x, "pgamma", shape=0.651343421, rate=0.006526678)
ad.test(data$y, "ppareto", shape=2.033259, scale=202.661918)
cvm.test(data$x, "pgamma", shape=0.651343421, rate=0.006526678)
cvm.test(data$y, "ppareto", shape=2.033259, scale=202.661918)
#Note that we are interpreting D and AN statistics rather than P value. The smaller these values, the better.

============================================================================================================================
#Distribution 3
fit.expx <- fitdist(data$x, distr = "exp", method = "mle")
fit.expx
plot(fit.expx)
------------------------------------------------------------------------
#QQ Plotting
exp.x <- rexp(10000, rate=0.01001991)
exp.x2 <- sort(exp.x)
PDexpx <- data.frame(Sample = x, Theoretical = exp.x2)
ggplot(data = PDexpx, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values against Exponential Distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
------------------------------------------------------------------------
#Producing a more effective ecdf
PD5 <- melt(PDexpx)
names(PD5) <- c("Distribution", "Claim")
PD5 <- ddply(PD5, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD5, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Exponential CDF') +
xlab('Claim Size') +
ylab('F(x)') +
xlim(NA,6000)
***********************************************************************
#Repeat with Y
fit.expy <- fitdist(data$y, distr = "exp", method = "mle")
fit.expy
plot(fit.expy)
------------------------------------------------------------------------
#QQ Plotting
exp.y <- rexp(10000, rate=0.004845311)
exp.y2 <- sort(exp.y)
PDexpy <- data.frame(Sample = y, Theoretical = exp.y2)
ggplot(data = PDexpy, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values Exponential Distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
------------------------------------------------------------------------
#Producing a more effective ecdf
PD6 <- melt(PDexpy)
names(PD6) <- c("Distribution", "Claim")
PD6 <- ddply(PD5, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD6, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Exponential CDF') +
xlab('Claim Size') +
ylab('F(x)') +
xlim(NA, 6000)
------------------------------------------------------------------------
#G.O.F tests
#We can use both Anderson-Darling and Kolmogorov Smirnoff
ks.test(x, exp.x)
ks.test(y, exp.y)
ad.test(data$x, "pexp", rate=0.01001991)
ad.test(data$y, "pexp", rate=0.004845311)
cvm.test(data$x, "pexp", rate=0.01001991)
cvm.test(data$y, "pexp", rate=0.004845311)
#Note that we are interpreting D and AN statistics rather than P value. The smaller these values, the better.
============================================================================================================================

#Distribution 4

fit.lnx <- fitdist(data$x, distr = "lnorm", method = "mle" )
fit.lnx
plot(fit.lnx)
------------------------------------------------------------------------
#QQ Plotting
lnorm.x <- rlnorm(10000, meanlog=3.666128, sdlog=1.409079)
lnorm.x2 <- sort(lnorm.x)
PDlnx <- data.frame(Sample = x, Theoretical = lnorm.x2)
ggplot(data = PDlnx, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values against log-normal Distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
------------------------------------------------------------------------
#Producing a more effective ecdf
PD7 <- melt(PDlnx)
names(PD7) <- c("Distribution", "Claim")
PD7 <- ddply(PD7, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD7, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Log-Normal CDF') +
xlab('Claim Size') +
ylab('F(x)') +
xlim(NA, 7500)
***********************************************************************
#Repeat with Y
fit.lny <- fitdist(data$y, distr = "lnorm", method = "mle" )
fit.lny
plot(fit.lny)
------------------------------------------------------------------------
#QQ Plotting
lnorm.y <- rlnorm(10000, meanlog=4.308268, sdlog=1.459328)
lnorm.y2 <- sort(lnorm.y)
PDlny <- data.frame(Sample = y, Theoretical = lnorm.y2)
ggplot(data = PDlny, aes(x = Theoretical, y = Sample)) +
geom_point(size = 1) + 
geom_abline(intercept = 0, slope = 1, colour = 'red') + 
ggtitle('Quantile-Quantile Plot') + 
labs(subtitle = '(Comparison of observed values against log-normal Distribution)') + 
xlab('Theoretical Quantiles') + 
ylab('Empirical Quantiles');
------------------------------------------------------------------------
#ECDF
PD8 <- melt(PDlny)
names(PD8) <- c("Distribution", "Claim")
PD8 <- ddply(PD8, .(Distribution), transform, ecd=ecdf(Claim)(Claim))
ggplot(PD8, aes(x=Claim)) +
stat_ecdf(aes(colour=Distribution)) +
ggtitle('Empirical vs Theoretical Log-Normal CDF') +
xlab('Claim Size') +
xlim(NA, 20000)
------------------------------------------------------------------------
#G.O.F tests
#We can use both Anderson-Darling and Kolmogorov Smirnoff
ks.test(x, lnorm.x)
ks.test(y, lnorm.y)
ad.test(data$x, "plnorm", meanlog=3.666128, sdlog=1.409079)
ad.test(data$y, "plnorm", meanlog=4.308268, sdlog=1.459328)
cvm.test(data$x, "plnorm", meanlog=3.666128, sdlog=1.409079)
cvm.test(data$y, "plnorm", meanlog=4.308268, sdlog=1.459328)
#Note that we are interpreting D and AN statistics rather than P value. The smaller these values, the better.
