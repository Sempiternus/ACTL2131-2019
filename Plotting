# Updating R
install.packages("installr")
library(installr)
updateR()

#Transferring Data
data <- read.csv(file="5163984.csv", header=TRUE, sep=",")
names(data) <- c("x", "y")

#determining distribution of individual variables
install.packages("fitdistrplus")
library("fitdistrplus")
descdist(data$x, discrete=FALSE)
#summary statistics
#s------
#smin:  1   max:  8825 
#median:  43 
#mean:  99.8013 
#estimated sd:  251.2799 
#estimated skewness:  14.47178 
#estimated kurtosis:  336.7666 
snormal_dist <- fitdist(data$x, "norm")
plot(normal_dist)

#Testing for normality 
install.packages('nortest')
ad.test(data$x)
ad.test(data$y)
#P value < 2.2e-16 so we can reject the null hypothesis (that data is normally distributed)

library("MASS")
#fitting gamma distribution
fit.gamma <- fitdist(data$x, distr = "gamma", method = "mle")
#fitting pareto distribution
library("actuar")
fit.pareto <- fitdist(data$y, distr = "pareto", method = "mle")
summary(fit.pareto)
plot(fit.pareto)

---------------------------------------------------------------------
#Useless stuff
install.packages("Emcdf")

#Removing outliers
data[which(data$x %in% outliers),]
data <- data[-which(data$x %in% outliers),]

#information gathering
boxplot.stats(data$loss_x)

# Gamma negative loglikelihood
negll_gamma <- function(parm, x) {
# parm[1] is k
# parm[2] is theta
tmp1 <- x/parm[2] + log(gamma(parm[1])) + parm[1]*log(parm[2])
tmp2 <- (parm[1]-1)*log(x)
result <- -sum(tmp2-tmp1)
return(result)
}
# initial values using method of moments
theta0 <- var(data)/mean(data)
k0 <- mean(data)/theta0
#MLE
fit_gamma <- constrOptim(
c(k0,theta0),
negll_gamma,
NULL,
ui=rbind(c(1,0),c(0,1)),
ci=c(0,0),
x=x)
